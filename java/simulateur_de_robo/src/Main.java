import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Main {

    /**
     * Analyse une cha√Æne JSON tr√®s simple (non imbriqu√©e) et la convertit en une carte cl√©-valeur.
     * ‚ö†Ô∏è Cette m√©thode ne prend pas en charge les structures JSON complexes ni les tableaux r√©els.
     */
    public static Map<String, String> parseJson(String json) {
        Map<String, String> data = new HashMap<>();
        json = json.replaceAll("[{}\"]", ""); // supprime les accolades et les guillemets doubles
        String[] entries = json.split(",");

        for (String entry : entries) {
            String[] keyValue = entry.split(":", 2);
            if (keyValue.length == 2) {
                data.put(keyValue[0].trim(), keyValue[1].trim());
            }
        }
        return data;
    }

    /**
     * Convertit une cha√Æne s√©par√©e par des virgules (par exemple, ¬´4,5,6,7¬ª) en un tableau d'entiers.
     * Si une valeur n‚Äôest pas un nombre, elle est remplac√©e par -1.
     */
    public static int[] parseInstruction(String instructionString) {
        String[] parts = instructionString.split(",");
        int[] result = new int[parts.length];

        for (int i = 0; i < parts.length; i++) {
            try {
                result[i] = Integer.parseInt(parts[i].trim());
            } catch (NumberFormatException e) {
                System.err.println("‚ö†Ô∏è Erreur de conversion '" + parts[i] + "' au nombre entier.");
                result[i] = -1;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        try {
            // üõ∞Ô∏è Faire une requ√™te √† l'API pour obtenir les donn√©es du robot en utilisant son MAC
            String response = RobotClient.getRobotDataByMacAddress("A4:5E:60:11:22:33");

            // üß© Analyser la r√©ponse JSON (simple) dans une carte cl√©-valeur
            Map<String, String> data = parseJson(response);
            System.out.println("üîπ Data del robot: " + data);
            // üìã Affiche les donn√©es de base du robot
            System.out.println("üîπ Nombre del robot: " + data.get("name"));
            System.out.println("üîπ Direcci√≥n MAC: " + data.get("mac_address"));
            System.out.println("üîπ Misi√≥n asignada: " + data.get("mission"));

            // üì¶ Instructions de traitement et d'affichage si pr√©sentes
            String instructionStr = data.get("instruction");
            if (instructionStr != null) {
                int[] instructions = parseInstruction(instructionStr);
                System.out.print("üîπ Instructions re√ßues : ");
                for (int inst : instructions) {
                    System.out.print(inst + " ");
                }
                System.out.println();
            } else {
                System.out.println("‚ö†Ô∏è Aucune instruction trouv√©e.");
            }

        } catch (IOException e) {
            System.err.println("‚ùå Erreur lors de l'obtention des donn√©es du robot.");
            e.printStackTrace();
        }

        // üñºÔ∏è Lancer l'interface graphique (Swing)
        javax.swing.SwingUtilities.invokeLater(() -> {
            javax.swing.JFrame frame = new javax.swing.JFrame("Simulateur de robot");
            frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
            frame.setContentPane(new RobotPanel());
            frame.pack();
            frame.setVisible(true);
        });
    }
}
